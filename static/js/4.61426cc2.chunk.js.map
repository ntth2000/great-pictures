{"version":3,"sources":["components/AllPictures/NewPictureForm.module.css","components/UI/Card.module.css","components/UI/Card.js","components/AllPictures/NewPictureForm.js","pages/NewPicture.js"],"names":["module","exports","Card","props","className","classes","card","children","NewPictureForm","authCtx","useContext","AuthContext","postedDate","Date","useState","isEntering","setIsEntering","imgInputRef","useRef","descriptionInputRef","formContainer","when","message","location","cardContainer","form","onSubmit","e","preventDefault","onAddPictureHandler","owner","userId","image","current","value","description","date","onFocus","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","actions","onClick","NewPicture","useHttp","addPicture","sendRequest","status","history","useHistory","useEffect","push","newImage"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,cAAgB,sCAAsC,cAAgB,sCAAsC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCAhQD,EAAOC,QAAU,CAAC,KAAO,qB,yGCQVC,EARF,SAAAC,GACT,OACI,yBAASC,UAAWC,IAAQC,KAA5B,SACKH,EAAMI,Y,gBCwEJC,EAnEQ,SAACL,GACtB,IAAMM,EAAUC,qBAAWC,KAGvBC,EAAa,IAAIC,KAGrB,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAcC,mBACdC,EAAsBD,mBAmB5B,OACE,sBAAKd,UAAWC,IAAQe,cAAxB,UACE,cAAC,IAAD,CACEC,KAAMN,EACNO,QAAS,SAACC,GAAD,MACP,yEAGJ,qBAAKnB,UAAWC,IAAQmB,cAAxB,SACE,cAAC,EAAD,UACE,uBACEpB,UAAWC,IAAQoB,KACnBC,SA7BY,SAACC,GACrBA,EAAEC,iBACFzB,EAAM0B,oBAAoB,CACxBC,MAAOrB,EAAQsB,OACfC,MAAOf,EAAYgB,QAAQC,MAC3BC,YAAahB,EAAoBc,QAAQC,MACzCE,KAAMxB,KAwBAyB,QAhBiB,WACzBrB,GAAc,IAYR,UAKGb,EAAMmC,WACL,qBAAKlC,UAAWC,IAAQkC,QAAxB,SACE,cAACC,EAAA,EAAD,MAGJ,sBAAKpC,UAAWC,IAAQoC,QAAxB,UACE,uBAAOC,QAAQ,MAAf,uBACA,uBAAOC,KAAK,OAAOC,GAAG,MAAMC,IAAK5B,OAEnC,sBAAKb,UAAWC,IAAQoC,QAAxB,UACE,uBAAOC,QAAQ,cAAf,yBACA,uBAAOC,KAAK,OAAOC,GAAG,cAAcC,IAAK1B,OAE3C,qBAAKf,UAAWC,IAAQyC,QAAxB,SACE,wBAAQ1C,UAAU,MAAM2C,QAnCN,WAC5B/B,GAAc,IAkCJ,sC,gBCpCCgC,UAtBI,SAAC7C,GAClB,MAAgC8C,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAEfC,EAAUC,cAEhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,eAEd,CAACH,EAASD,IAMb,OACE,cAAC,EAAD,CACEvB,oBANsB,SAAC4B,GACzBN,EAAYM,IAMVnB,UAAsB,YAAXc","file":"static/js/4.61426cc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"NewPictureForm_formContainer__2Cnlk\",\"cardContainer\":\"NewPictureForm_cardContainer__7UWXb\",\"form\":\"NewPictureForm_form__JO11r\",\"loading\":\"NewPictureForm_loading__3fGEP\",\"control\":\"NewPictureForm_control__3o9zx\",\"actions\":\"NewPictureForm_actions__2hGdG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2OJjw\"};","import classes from './Card.module.css'\r\nconst Card = props=>{\r\n    return (\r\n        <section className={classes.card}>\r\n            {props.children}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Card","import React, { useContext, useRef, useState } from \"react\";\r\nimport { Prompt } from \"react-router\";\r\n\r\nimport classes from \"./NewPictureForm.module.css\";\r\n\r\nimport Card from \"../UI/Card\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport { AuthContext } from \"../../auth-context/auth-context\";\r\n//using prompt to prevent unpossibly wanted route transitions\r\nconst NewPictureForm = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  //get posted date\r\n  var postedDate = new Date();\r\n\r\n  //use state to check whether user is entering or not\r\n  const [isEntering, setIsEntering] = useState(false);\r\n  const imgInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    props.onAddPictureHandler({\r\n      owner: authCtx.userId,\r\n      image: imgInputRef.current.value,\r\n      description: descriptionInputRef.current.value,\r\n      date: postedDate,\r\n    });\r\n  };\r\n\r\n  //use this function to prevent prompt when use finishes filling form and wants to add new picture\r\n  const finishEnteringHandler = () => {\r\n    setIsEntering(false);\r\n  };\r\n  const formFocusedHandler = () => {\r\n    setIsEntering(true);\r\n  };\r\n  return (\r\n    <div className={classes.formContainer}>\r\n      <Prompt\r\n        when={isEntering}\r\n        message={(location) =>\r\n          \"Are you sure you want to leave? All your entered data will be lost!\"\r\n        }\r\n      />\r\n      <div className={classes.cardContainer}>\r\n        <Card>\r\n          <form\r\n            className={classes.form}\r\n            onSubmit={submitHandler}\r\n            onFocus={formFocusedHandler}\r\n          >\r\n            {props.isLoading && (\r\n              <div className={classes.loading}>\r\n                <LoadingSpinner />\r\n              </div>\r\n            )}\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"img\">Image URL</label>\r\n              <input type=\"text\" id=\"img\" ref={imgInputRef} />\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label htmlFor=\"description\">Description</label>\r\n              <input type=\"text\" id=\"description\" ref={descriptionInputRef} />\r\n            </div>\r\n            <div className={classes.actions}>\r\n              <button className=\"btn\" onClick={finishEnteringHandler}>\r\n                Add Picture\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default NewPictureForm;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport NewPictureForm from \"../components/AllPictures/NewPictureForm\";\r\n\r\nimport { addPicture } from \"../lib/api\";\r\nimport useHttp from \"../hooks/use-http\";\r\n\r\nconst NewPicture = (props) => {\r\n  const { sendRequest, status } = useHttp(addPicture);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      history.push(\"/pictures\");\r\n    }\r\n  }, [history, status]);\r\n\r\n  const addPictureHandler = (newImage) => {\r\n    sendRequest(newImage);\r\n  };\r\n\r\n  return (\r\n    <NewPictureForm\r\n      onAddPictureHandler={addPictureHandler}\r\n      isLoading={status === \"pending\"}\r\n    />\r\n  );\r\n};\r\nexport default NewPicture;\r\n"],"sourceRoot":""}